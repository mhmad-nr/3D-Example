/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 src/assets/models/small-village/small-village.glb -o src/pages/SmallVillage/SmallVillageModel.tsx -t s 
*/

import * as THREE from 'three'
import { useRef, useMemo } from 'react'
import { Clone, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Cylinder_1: THREE.Mesh
    Cylinder_2: THREE.Mesh
    Cylinder_3: THREE.Mesh
    Cylinder_4: THREE.Mesh
    Cylinder_5: THREE.Mesh
    Cylinder_6: THREE.Mesh
    Cylinder_7: THREE.Mesh
    Cylinder_8: THREE.Mesh
    Cylinder_9: THREE.Mesh
    Cylinder_10: THREE.Mesh
    Cylinder_11: THREE.Mesh
    Cylinder_12: THREE.Mesh
    Cylinder_13: THREE.Mesh
    Cylinder_14: THREE.Mesh
  }
  materials: {
    window: THREE.MeshStandardMaterial
    wood: THREE.MeshStandardMaterial
    wall: THREE.MeshStandardMaterial
    stone: THREE.MeshStandardMaterial
    meatl: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    roof: THREE.MeshStandardMaterial
    ['Material.007']: THREE.MeshStandardMaterial
    ['stone.001']: THREE.MeshStandardMaterial
    ['Material.008']: THREE.MeshStandardMaterial
    grass: THREE.MeshStandardMaterial
    ['Material.006']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['window.002']: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function SmallVillageModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('src/assets/models/small-village/small-village.glb') as GLTFResult
  const windowRef = useRef<THREE.Group>(null)
  const insideRef = useRef<THREE.Group>(null)

  const { colorOne, colorTwo } = useMemo(() => {
    const colorTwo = new THREE.Color('#fcec97')
    const colorOne = new THREE.Color('#75522d')
    return {
      colorOne, colorTwo
    }
  }, [])

  useFrame(() => {
    if (windowRef.current && insideRef.current) {
      windowRef.current.traverse((obj) => (obj as any).material.emissive.lerp(colorOne, 0.1))
      insideRef.current.traverse((obj) => (obj as any).material.emissive.lerp(colorTwo, 0.1))
    }
  })
  return (
    <group {...props} dispose={null}>
      <group position={[0.06, 1.742, 0.059]} scale={[0.05, 0.013, 0.05]}>
        <Clone ref={windowRef} object={nodes.Cylinder_1} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder_2.geometry} material={materials.wood} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder_4.geometry} material={materials.stone} />
        <mesh geometry={nodes.Cylinder_3.geometry} material={materials.wall} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder_5.geometry} material={materials.meatl} />
        <Clone ref={insideRef} object={nodes.Cylinder_6} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder_7.geometry} material={materials.roof} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder_8.geometry} material={materials['Material.007']} />
        <mesh receiveShadow geometry={nodes.Cylinder_9.geometry} material={materials['stone.001']} />
        <mesh receiveShadow geometry={nodes.Cylinder_10.geometry} material={materials['Material.008']} />
        <mesh receiveShadow geometry={nodes.Cylinder_11.geometry} material={materials.grass} />
        <mesh receiveShadow geometry={nodes.Cylinder_12.geometry} material={materials['Material.006']} />
        <mesh receiveShadow geometry={nodes.Cylinder_13.geometry} material={materials['Material.002']} />
        <mesh receiveShadow geometry={nodes.Cylinder_14.geometry} material={materials['window.002']} />
      </group>
    </group>
  )
}

useGLTF.preload('src/assets/models/small-village/small-village.glb')
